Right(List(ClassNode(Main,List(KeywordNode(class), IdentifierNode(Main), KeywordNode({), SubroutineDecNode(Function,main,void,ParameterListNode(List()),SubroutineBodyNode(List(KeywordNode({), VarDecNode(List(SingleVariableDec(value,int,Local))), StatementsNode(List(DoStatementNode(SubroutineCallNode(Main.fillMemory,ExpressionListNode(List(ExpressionNode(List(LiteralTermNode(IntegerConstantNode(8001)))), KeywordNode(,), ExpressionNode(List(LiteralTermNode(IntegerConstantNode(16)))), KeywordNode(,), ExpressionNode(List(GenericTermNode(List(UnaryTermNode(-,LiteralTermNode(IntegerConstantNode(1))))))))),List(IdentifierNode(Main), KeywordNode(.), IdentifierNode(fillMemory), KeywordNode((), ExpressionListNode(List(ExpressionNode(List(LiteralTermNode(IntegerConstantNode(8001)))), KeywordNode(,), ExpressionNode(List(LiteralTermNode(IntegerConstantNode(16)))), KeywordNode(,), ExpressionNode(List(GenericTermNode(List(UnaryTermNode(-,LiteralTermNode(IntegerConstantNode(1))))))))), KeywordNode())))), LetStatementNode(value,List(KeywordNode(=), ExpressionNode(List(GenericTermNode(List(SubroutineCallNode(Memory.peek,ExpressionListNode(List(ExpressionNode(List(LiteralTermNode(IntegerConstantNode(8000)))))),List(IdentifierNode(Memory), KeywordNode(.), IdentifierNode(peek), KeywordNode((), ExpressionListNode(List(ExpressionNode(List(LiteralTermNode(IntegerConstantNode(8000)))))), KeywordNode()))))))), KeywordNode(;))), DoStatementNode(SubroutineCallNode(Main.convert,ExpressionListNode(List(ExpressionNode(List(IdentifierTermNode(value))))),List(IdentifierNode(Main), KeywordNode(.), IdentifierNode(convert), KeywordNode((), ExpressionListNode(List(ExpressionNode(List(IdentifierTermNode(value))))), KeywordNode())))), ReturnStatementNode(List(KeywordNode(;))))), KeywordNode(})))), SubroutineDecNode(Function,convert,void,ParameterListNode(List(SingleVariableDec(value,int,Argument))),SubroutineBodyNode(List(KeywordNode({), VarDecNode(List(SingleVariableDec(mask,int,Local), SingleVariableDec(position,int,Local))), VarDecNode(List(SingleVariableDec(loop,boolean,Local))), StatementsNode(List(LetStatementNode(loop,List(KeywordNode(=), ExpressionNode(List(LiteralTermNode(KeywordNode(true)))), KeywordNode(;))), WhileStatementNode(ExpressionNode(List(IdentifierTermNode(loop))),StatementsNode(List(LetStatementNode(position,List(KeywordNode(=), ExpressionNode(List(IdentifierTermNode(position), KeywordNode(+), LiteralTermNode(IntegerConstantNode(1)))), KeywordNode(;))), LetStatementNode(mask,List(KeywordNode(=), ExpressionNode(List(GenericTermNode(List(SubroutineCallNode(Main.nextMask,ExpressionListNode(List(ExpressionNode(List(IdentifierTermNode(mask))))),List(IdentifierNode(Main), KeywordNode(.), IdentifierNode(nextMask), KeywordNode((), ExpressionListNode(List(ExpressionNode(List(IdentifierTermNode(mask))))), KeywordNode()))))))), KeywordNode(;))), IfStatementNode(ExpressionNode(List(GenericTermNode(List(UnaryTermNode(~,PriorityTermNode(ExpressionNode(List(IdentifierTermNode(position), KeywordNode(>), LiteralTermNode(IntegerConstantNode(16)))))))))),StatementsNode(List(IfStatementNode(ExpressionNode(List(GenericTermNode(List(UnaryTermNode(~,PriorityTermNode(ExpressionNode(List(PriorityTermNode(ExpressionNode(List(IdentifierTermNode(value), KeywordNode(&), IdentifierTermNode(mask)))), KeywordNode(=), LiteralTermNode(IntegerConstantNode(0)))))))))),StatementsNode(List(DoStatementNode(SubroutineCallNode(Memory.poke,ExpressionListNode(List(ExpressionNode(List(LiteralTermNode(IntegerConstantNode(8000)), KeywordNode(+), IdentifierTermNode(position))), KeywordNode(,), ExpressionNode(List(LiteralTermNode(IntegerConstantNode(1)))))),List(IdentifierNode(Memory), KeywordNode(.), IdentifierNode(poke), KeywordNode((), ExpressionListNode(List(ExpressionNode(List(LiteralTermNode(IntegerConstantNode(8000)), KeywordNode(+), IdentifierTermNode(position))), KeywordNode(,), ExpressionNode(List(LiteralTermNode(IntegerConstantNode(1)))))), KeywordNode())))))),Some(StatementsNode(List(DoStatementNode(SubroutineCallNode(Memory.poke,ExpressionListNode(List(ExpressionNode(List(LiteralTermNode(IntegerConstantNode(8000)), KeywordNode(+), IdentifierTermNode(position))), KeywordNode(,), ExpressionNode(List(LiteralTermNode(IntegerConstantNode(0)))))),List(IdentifierNode(Memory), KeywordNode(.), IdentifierNode(poke), KeywordNode((), ExpressionListNode(List(ExpressionNode(List(LiteralTermNode(IntegerConstantNode(8000)), KeywordNode(+), IdentifierTermNode(position))), KeywordNode(,), ExpressionNode(List(LiteralTermNode(IntegerConstantNode(0)))))), KeywordNode())))))))))),Some(StatementsNode(List(LetStatementNode(loop,List(KeywordNode(=), ExpressionNode(List(LiteralTermNode(KeywordNode(false)))), KeywordNode(;)))))))))), ReturnStatementNode(List(KeywordNode(;))))), KeywordNode(})))), SubroutineDecNode(Function,nextMask,int,ParameterListNode(List(SingleVariableDec(mask,int,Argument))),SubroutineBodyNode(List(KeywordNode({), StatementsNode(List(IfStatementNode(ExpressionNode(List(IdentifierTermNode(mask), KeywordNode(=), LiteralTermNode(IntegerConstantNode(0)))),StatementsNode(List(ReturnStatementNode(List(ExpressionNode(List(LiteralTermNode(IntegerConstantNode(1)))), KeywordNode(;))))),Some(StatementsNode(List(ReturnStatementNode(List(ExpressionNode(List(IdentifierTermNode(mask), KeywordNode(*), LiteralTermNode(IntegerConstantNode(2)))), KeywordNode(;))))))))), KeywordNode(})))), SubroutineDecNode(Function,fillMemory,void,ParameterListNode(List(SingleVariableDec(startAddress,int,Argument), SingleVariableDec(length,int,Argument), SingleVariableDec(value,int,Argument))),SubroutineBodyNode(List(KeywordNode({), StatementsNode(List(WhileStatementNode(ExpressionNode(List(IdentifierTermNode(length), KeywordNode(>), LiteralTermNode(IntegerConstantNode(0)))),StatementsNode(List(DoStatementNode(SubroutineCallNode(Memory.poke,ExpressionListNode(List(ExpressionNode(List(IdentifierTermNode(startAddress))), KeywordNode(,), ExpressionNode(List(IdentifierTermNode(value))))),List(IdentifierNode(Memory), KeywordNode(.), IdentifierNode(poke), KeywordNode((), ExpressionListNode(List(ExpressionNode(List(IdentifierTermNode(startAddress))), KeywordNode(,), ExpressionNode(List(IdentifierTermNode(value))))), KeywordNode())))), LetStatementNode(length,List(KeywordNode(=), ExpressionNode(List(IdentifierTermNode(length), KeywordNode(-), LiteralTermNode(IntegerConstantNode(1)))), KeywordNode(;))), LetStatementNode(startAddress,List(KeywordNode(=), ExpressionNode(List(IdentifierTermNode(startAddress), KeywordNode(+), LiteralTermNode(IntegerConstantNode(1)))), KeywordNode(;)))))), ReturnStatementNode(List(KeywordNode(;))))), KeywordNode(})))), KeywordNode(})))))