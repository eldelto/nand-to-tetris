Right(List(ClassNode(Main,List(KeywordNode(class), IdentifierNode(Main), KeywordNode({), ClassVarDecNode(List(SingleVariableDec(test,boolean,Static))), SubroutineDecNode(Function,main,void,ParameterListNode(List()),SubroutineBodyNode(List(KeywordNode({), VarDecNode(List(SingleVariableDec(game,SquareGame,Local))), StatementsNode(List(LetStatementNode(game,List(KeywordNode(=), ExpressionNode(List(GenericTermNode(List(SubroutineCallNode(SquareGame.new,ExpressionListNode(List()),List(IdentifierNode(SquareGame), KeywordNode(.), IdentifierNode(new), KeywordNode((), ExpressionListNode(List()), KeywordNode()))))))), KeywordNode(;))), DoStatementNode(SubroutineCallNode(game.run,ExpressionListNode(List()),List(IdentifierNode(game), KeywordNode(.), IdentifierNode(run), KeywordNode((), ExpressionListNode(List()), KeywordNode())))), DoStatementNode(SubroutineCallNode(game.dispose,ExpressionListNode(List()),List(IdentifierNode(game), KeywordNode(.), IdentifierNode(dispose), KeywordNode((), ExpressionListNode(List()), KeywordNode())))), ReturnStatementNode(List(KeywordNode(;))))), KeywordNode(})))), SubroutineDecNode(Function,more,void,ParameterListNode(List()),SubroutineBodyNode(List(KeywordNode({), VarDecNode(List(SingleVariableDec(i,int,Local), SingleVariableDec(j,int,Local))), VarDecNode(List(SingleVariableDec(s,String,Local))), VarDecNode(List(SingleVariableDec(a,Array,Local))), StatementsNode(List(IfStatementNode(ExpressionNode(List(LiteralTermNode(KeywordNode(false)))),StatementsNode(List(LetStatementNode(s,List(KeywordNode(=), ExpressionNode(List(LiteralTermNode(StringConstantNode(string constant)))), KeywordNode(;))), LetStatementNode(s,List(KeywordNode(=), ExpressionNode(List(LiteralTermNode(KeywordNode(null)))), KeywordNode(;))), ArrayLetStatementNode(a,ExpressionNode(List(LiteralTermNode(IntegerConstantNode(1)))),ExpressionNode(List(ArrayIdentifierTermNode(a,ExpressionNode(List(LiteralTermNode(IntegerConstantNode(2)))))))))),Some(StatementsNode(List(LetStatementNode(i,List(KeywordNode(=), ExpressionNode(List(IdentifierTermNode(i), KeywordNode(*), PriorityTermNode(ExpressionNode(List(GenericTermNode(List(UnaryTermNode(-,IdentifierTermNode(j))))))))), KeywordNode(;))), LetStatementNode(j,List(KeywordNode(=), ExpressionNode(List(IdentifierTermNode(j), KeywordNode(/), PriorityTermNode(ExpressionNode(List(GenericTermNode(List(UnaryTermNode(-,LiteralTermNode(IntegerConstantNode(2)))))))))), KeywordNode(;))), LetStatementNode(i,List(KeywordNode(=), ExpressionNode(List(IdentifierTermNode(i), KeywordNode(|), IdentifierTermNode(j))), KeywordNode(;))))))), ReturnStatementNode(List(KeywordNode(;))))), KeywordNode(})))), KeywordNode(})))))