// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static bool color;
    static int screenAdr;
    static int screenEndAdr;
    

    /** Initializes the Screen. */
    function void init() {
        let color = true;
	let screenAdr = 16384;
	let screenEndAdr = screenAdr + 510;

	return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
	let i = screenAdr;
	while (i < screenEndAdr) {
	    do Memory.poke(i, false);
	    let i = i + 1;
        }

	return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
	return;
    }

    function int getByteForPixel(int x, int y) {
        return screenAdr + (y * 32) + (x / 16);
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int value, mask, adr;
	
        let mask = Math.powerOfTwo(x & 15);
	let adr = Screen.getByteForPixel(x, y);
	let value = Memory.peek(adr) | mask;
	do Memory.poke(adr, value);

	return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        if (x1 = x2) { do Screen.drawVerticalLine(x1, y1, y2); return; }
        if (y1 = y2) { do Screen.drawHorizontalLine(x1, x2, y1); return; }

	do Screen.drawDiagonalLine(x1, y1, x2, y2);
	return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        var int y, temp;
	if (y2 < y1) { let temp = y1; let y1 = y2; let y2 = temp; }
	
	let y = y1;
	while (y < y2) {
	    do Screen.drawPixel(x, y);
	    let y = y + 1;
	}

	return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int x, temp;
	if (x2 < x1) { let temp = x1; let x1 = x2; let x2 = temp; }
	
	let x = x1;
	while (x < x2) {
	    do Screen.drawPixel(x, y);
	    let x = x + 1;
	}

	return;
    }

    function void drawDiagonalLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, xdyMinusydx;
	var int yStep, temp;
	
	let dx = (x2 - x1);
	let dy = (y2 - y1);

	if (dx < 0) { let temp = x1; let x1 = x2; let x2 = temp;
	    let temp = y1; let y1 = y2; let y2 = temp; }

	let dx = (x2 - x1);
	let dy = (y2 - y1);

	if (dy > -1) { let yStep = 1; } else { let yStep = -1; }

	let x = x1;
	let y = y1;
	let xdyMinusydx = 0;
	let temp = yStep * dy;

	while ((x < x2) | (y < y2)) {
	    if (xdyMinusydx < 0) {
	        let x = x + 1;
		let xdyMinusydx = xdyMinusydx + temp;
	    } else {
	        let y = y + yStep;
		let xdyMinusydx = xdyMinusydx - dx;
	    }

	    do Screen.drawPixel(x, y);
	}
	
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }
}
