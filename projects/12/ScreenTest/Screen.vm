function Screen.init 0
push constant 0
not
pop static 0
push constant 16384
pop static 1
push static 1
push constant 510
add
pop static 2
push constant 0
return
function Screen.clearScreen 1
push static 1
pop local 0
label WHILE_EXP0
push local 0
push static 2
lt
not
if-goto WHILE_END0
push local 0
push constant 0
call Memory.poke 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.getByteForPixel 0
push static 1
push argument 1
push constant 32
call Math.multiply 2
add
push argument 0
push constant 16
call Math.divide 2
add
return
function Screen.drawPixel 3
push argument 0
push constant 15
and
call Math.powerOfTwo 1
pop local 1
push argument 0
push argument 1
call Screen.getByteForPixel 2
pop local 2
push local 2
call Memory.peek 1
push local 1
or
pop local 0
push local 2
push local 0
call Memory.poke 2
pop temp 0
push constant 0
return
function Screen.drawLine 0
push argument 0
push argument 2
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push argument 1
push argument 3
call Screen.drawVerticalLine 3
pop temp 0
push constant 0
return
label IF_FALSE0
push argument 1
push argument 3
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
push argument 2
push argument 1
call Screen.drawHorizontalLine 3
pop temp 0
push constant 0
return
label IF_FALSE1
push argument 0
push argument 1
push argument 2
push argument 3
call Screen.drawDiagonalLine 4
pop temp 0
push constant 0
return
function Screen.drawVerticalLine 2
push argument 2
push argument 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
pop local 1
push argument 2
pop argument 1
push local 1
pop argument 2
label IF_FALSE0
push argument 1
pop local 0
label WHILE_EXP0
push local 0
push argument 2
lt
not
if-goto WHILE_END0
push argument 0
push local 0
call Screen.drawPixel 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawHorizontalLine 2
push argument 1
push argument 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
pop local 1
push argument 1
pop argument 0
push local 1
pop argument 1
label IF_FALSE0
push argument 0
pop local 0
label WHILE_EXP0
push local 0
push argument 1
lt
not
if-goto WHILE_END0
push local 0
push argument 2
call Screen.drawPixel 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawDiagonalLine 7
push argument 2
push argument 0
sub
pop local 2
push argument 3
push argument 1
sub
pop local 3
push local 2
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
pop local 6
push argument 2
pop argument 0
push local 6
pop argument 2
push argument 1
pop local 6
push argument 3
pop argument 1
push local 6
pop argument 3
label IF_FALSE0
push argument 2
push argument 0
sub
pop local 2
push argument 3
push argument 1
sub
pop local 3
push local 3
push constant 1
neg
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 1
pop local 5
goto IF_END1
label IF_FALSE1
push constant 1
neg
pop local 5
label IF_END1
push argument 0
pop local 0
push argument 1
pop local 1
push constant 0
pop local 4
push local 5
push local 3
call Math.multiply 2
pop local 6
label WHILE_EXP0
push local 0
push argument 2
lt
push local 1
push argument 3
lt
or
not
if-goto WHILE_END0
push local 4
push constant 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
push constant 1
add
pop local 0
push local 4
push local 6
add
pop local 4
goto IF_END2
label IF_FALSE2
push local 1
push local 5
add
pop local 1
push local 4
push local 2
sub
pop local 4
label IF_END2
push local 0
push local 1
call Screen.drawPixel 2
pop temp 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawRectangle 0
push constant 0
return
function Screen.drawCircle 0
push constant 0
return
