// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
      static int powerOfTwoList;

    /** Initializes the library. */
    function void init() {
        let powerOfTwoList = Array.new(16);
        let powerOfTwoList[0] = 1;
        let powerOfTwoList[1] = 2;
        let powerOfTwoList[2] = 4;
        let powerOfTwoList[3] = 8;
        let powerOfTwoList[4] = 16;
        let powerOfTwoList[5] = 32;
        let powerOfTwoList[6] = 64;
        let powerOfTwoList[7] = 128;
        let powerOfTwoList[8] = 256;
        let powerOfTwoList[9] = 512;
        let powerOfTwoList[10] = 1024;
        let powerOfTwoList[11] = 2048;
        let powerOfTwoList[12] = 4096;
        let powerOfTwoList[13] = 8192;
        let powerOfTwoList[14] = 16384;
        let powerOfTwoList[15] = 16384+16384;

	return;
    }

    function int powerOfTwo(int x) {
        return powerOfTwoList[x];
    }

    function boolean bit(int x, int i) {
    	     return ~((x & powerOfTwoList[i]) = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
    	     var int sum, shiftedX, i;
	     let sum = 0;
	     let shiftedX = x;

	     let i = 0;
      	     while (i < 16) {
	     	   if (Math.bit(y, i)) {
      	     	      let sum = sum + shiftedX;
		   }
		   let shiftedX = shiftedX + shiftedX;
		   let i = i + 1;
	     }

	     return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
    	var int isXNegative, isYNegative;
        var int q;
        var int result;
        
        let isXNegative = x < 0;
        let isYNegative = y < 0;
        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) {
            return 0;
        }
	
        let q = Math.divide(x, y+y);
        if (x - (2*q*y) < y) {
            let result = q+q;
        } else {
            let result = q+q+1;
        }
        
        if (isXNegative = isYNegative) {
            return result;
        }

        return -result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j, y;
        var int approximation;
        var int approximationSquared;
        
        let y = 0;
        let j = 7;
        while (~(j < 0)) {
            let approximation = y + powerOfTwoList[j];
            let approximationSquared = approximation * approximation;
            if (~(approximationSquared > x) & (approximationSquared > 0)) {    // Overflow handling
                let y = approximation;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
    	     if (a > b) {
	       return a;
	     }

	     return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
    	     if (a < b) {
	       return a;
	     }

	     return b;
    }
}
